// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"
	"time"
)

const createMaintenanceLog = `-- name: CreateMaintenanceLog :one
INSERT INTO maintenance_log (
    emitter,
    fault_description,
    issuing_department,
    maintenance_number,
    date_of_maintenance,
    used_materials,
    maintenance_technician,
    result,
    observations
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
) RETURNING id, created_at, updated_at, emitter, fault_description, issuing_department, maintenance_number, date_of_maintenance, used_materials, maintenance_technician, result, observations
`

type CreateMaintenanceLogParams struct {
	Emitter               string    `json:"emitter"`
	FaultDescription      string    `json:"fault_description"`
	IssuingDepartment     string    `json:"issuing_department"`
	MaintenanceNumber     string    `json:"maintenance_number"`
	DateOfMaintenance     time.Time `json:"date_of_maintenance"`
	UsedMaterials         string    `json:"used_materials"`
	MaintenanceTechnician string    `json:"maintenance_technician"`
	Result                *string   `json:"result"`
	Observations          *string   `json:"observations"`
}

func (q *Queries) CreateMaintenanceLog(ctx context.Context, arg CreateMaintenanceLogParams) (MaintenanceLog, error) {
	row := q.db.QueryRowContext(ctx, createMaintenanceLog,
		arg.Emitter,
		arg.FaultDescription,
		arg.IssuingDepartment,
		arg.MaintenanceNumber,
		arg.DateOfMaintenance,
		arg.UsedMaterials,
		arg.MaintenanceTechnician,
		arg.Result,
		arg.Observations,
	)
	var i MaintenanceLog
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Emitter,
		&i.FaultDescription,
		&i.IssuingDepartment,
		&i.MaintenanceNumber,
		&i.DateOfMaintenance,
		&i.UsedMaterials,
		&i.MaintenanceTechnician,
		&i.Result,
		&i.Observations,
	)
	return i, err
}

const deleteMaintenanceLog = `-- name: DeleteMaintenanceLog :exec
DELETE FROM maintenance_log
WHERE id = ?
`

func (q *Queries) DeleteMaintenanceLog(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMaintenanceLog, id)
	return err
}

const getMaintenanceLog = `-- name: GetMaintenanceLog :one
SELECT id, created_at, updated_at, emitter, fault_description, issuing_department, maintenance_number, date_of_maintenance, used_materials, maintenance_technician, result, observations FROM maintenance_log
WHERE id = ? LIMIT 1
`

func (q *Queries) GetMaintenanceLog(ctx context.Context, id int64) (MaintenanceLog, error) {
	row := q.db.QueryRowContext(ctx, getMaintenanceLog, id)
	var i MaintenanceLog
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Emitter,
		&i.FaultDescription,
		&i.IssuingDepartment,
		&i.MaintenanceNumber,
		&i.DateOfMaintenance,
		&i.UsedMaterials,
		&i.MaintenanceTechnician,
		&i.Result,
		&i.Observations,
	)
	return i, err
}

const getMaintenanceLogs = `-- name: GetMaintenanceLogs :many
SELECT id, created_at, updated_at, emitter, fault_description, issuing_department, maintenance_number, date_of_maintenance, used_materials, maintenance_technician, result, observations FROM maintenance_log
`

func (q *Queries) GetMaintenanceLogs(ctx context.Context) ([]MaintenanceLog, error) {
	rows, err := q.db.QueryContext(ctx, getMaintenanceLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MaintenanceLog
	for rows.Next() {
		var i MaintenanceLog
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Emitter,
			&i.FaultDescription,
			&i.IssuingDepartment,
			&i.MaintenanceNumber,
			&i.DateOfMaintenance,
			&i.UsedMaterials,
			&i.MaintenanceTechnician,
			&i.Result,
			&i.Observations,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaintenanceLog = `-- name: UpdateMaintenanceLog :exec
UPDATE maintenance_log
SET created_at = ?,
    updated_at = ?,
    emitter = ?,
    fault_description = ?,
    issuing_department = ?,
    maintenance_number = ?,
    date_of_maintenance = ?,
    used_materials = ?,
    maintenance_technician = ?,
    result = ?,
    observations = ?
WHERE id = ?
`

type UpdateMaintenanceLogParams struct {
	CreatedAt             *time.Time `json:"created_at"`
	UpdatedAt             *time.Time `json:"updated_at"`
	Emitter               string     `json:"emitter"`
	FaultDescription      string     `json:"fault_description"`
	IssuingDepartment     string     `json:"issuing_department"`
	MaintenanceNumber     string     `json:"maintenance_number"`
	DateOfMaintenance     time.Time  `json:"date_of_maintenance"`
	UsedMaterials         string     `json:"used_materials"`
	MaintenanceTechnician string     `json:"maintenance_technician"`
	Result                *string    `json:"result"`
	Observations          *string    `json:"observations"`
	ID                    int64      `json:"id"`
}

func (q *Queries) UpdateMaintenanceLog(ctx context.Context, arg UpdateMaintenanceLogParams) error {
	_, err := q.db.ExecContext(ctx, updateMaintenanceLog,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Emitter,
		arg.FaultDescription,
		arg.IssuingDepartment,
		arg.MaintenanceNumber,
		arg.DateOfMaintenance,
		arg.UsedMaterials,
		arg.MaintenanceTechnician,
		arg.Result,
		arg.Observations,
		arg.ID,
	)
	return err
}
